<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Privilege Escalation</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
        Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      max-width: 900px;
      margin: 2rem auto;
      padding: 0 1rem;
      line-height: 1.6;
      color: #222;
      background: #fefefe;
    }
    h1, h2, h3, h4 {
      font-weight: 700;
      margin-top: 2rem;
      margin-bottom: 0.5rem;
      color: #111;
    }
    hr {
      border: none;
      border-top: 1px solid #ccc;
      margin: 2rem 0;
    }
    blockquote {
      font-style: italic;
      color: #555;
      border-left: 4px solid #ccc;
      margin: 1.5rem 0;
      padding-left: 1rem;
      background: #f9f9f9;
    }
    ul {
      padding-left: 1.2rem;
    }
    a {
      color: #0366d6;
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    code {
      background: #eee;
      padding: 2px 5px;
      border-radius: 3px;
      font-family: monospace;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 1rem;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f6f8fa;
    }
    .emoji {
      font-size: 1.2em;
      margin-right: 0.3em;
    }
  </style>
</head>

<body>
  <h1>üß® Privilege Escalation</h1>
  <blockquote>Pseudonymous cybersecurity enthusiast progressing toward OSCP certification.</blockquote>
  <hr>

  <h2>üß† About</h2>
  <p>I'm a pseudonymous cybersecurity professional with expertise in offensive security, SOC analysis, and secure system design.<br />
     This page outlines my journey in mastering Linux privilege escalation. It details practical techniques I studied, tested, and used in CTFs or emulated labs. My goal: gain root from any foothold, systematically and stealthily.<br />
  </p>
  <hr>

  <h2>üõ∞Ô∏è Philosophy</h2>
  <blockquote>"Slow and steady wins the prize."</blockquote>
  <ul>
    <li>I believe offensive security is not about being the smartest person in the room‚Äîit‚Äôs about resilience, curiosity, and method. I treat pen-testing like a craft: solve, reflect, repeat. My learning philosophy includes:
      <ul>
        <li>Try ‚Üí Fail ‚Üí Learn: I embrace discomfort as a sign of growth.</li>
        <li>Consistency over bursts: A few focused hours every day beats weekend marathons.</li>
        <li>Depth over tools: I master concepts, not just commands.</li>
      </ul>
    </li>
  </ul>
  <hr>

  <h2>üîì Linux Privilege Escalation Techniques</h2>
  <blockquote>From foothold to root: practical techniques explored and tested</blockquote>

  <h3>üîé Enumeration first: linPEAS & manual analysis</h3>
  <ul>
    <li><strong>linPEAS</strong>: My first step is always to run this automated script to uncover:
      <ul>
        <li>SUID binaries, writable files, misconfigurations</li>
        <li>Cron jobs, PATH hijacking opportunities</li>
        <li>Kernel version and potential exploits</li>
      </ul>
    </li>
    <li>I complement this with manual enumeration using:
      <ul>
        <li><code>sudo -l</code>, <code>find / -perm -4000 2>/dev/null</code></li>
        <li><code>env</code>, <code>cat /etc/crontab</code>, <code>ps aux</code></li>
      </ul>
    </li>
  </ul>

  <h3>üî•üî• Misconfigurations: Sudo & Cron Abuse</h3>
  <ul>
    <li><strong>Sudo misconfiguration</strong>: If a binary is allowed via <code>sudo</code> without a password (NOPASSWD), I:
      <ul>
        <li>Check for GTFOBins-compatible escalation: e.g. <code>sudo less</code>, <code>sudo vi</code>, <code>sudo awk</code></li>
        <li>Escalate using <code>sudo -u root /bin/sh</code> or shell escape sequences</li>
      </ul>
    </li>
    <li><strong>Cron jobs</strong>: I hunt for:
      <ul>
        <li>World-writable scripts in <code>/etc/cron*</code></li>
        <li>Abuse PATH injection when scripts call binaries without absolute paths</li>
      </ul>
    </li>
  </ul>

  <h3>üß®üß® Exploiting SUID Binaries</h3>
  <ul>
    <li>Misconfigured SUID binaries often allow privilege escalation:
      <ul>
        <li>I analyze binaries with <code>strings</code> and <code>ltrace</code></li>
        <li>If the binary calls system tools insecurely (without full path), I hijack the execution</li>
        <li>I use GTFOBins to find known exploitable binaries</li>
      </ul>
    </li>
  </ul>

  <h3>üí•üí• Exploiting PATH & Environment Variables</h3>
  <ul>
    <li>If I control <code>$PATH</code> or environment variables in scripts run as root, I:
      <ul>
        <li>Replace expected binaries with malicious payloads in a controlled path</li>
        <li>Use environment variables like <code>LD_PRELOAD</code> or <code>LD_LIBRARY_PATH</code> when allowed</li>
      </ul>
    </li>
  </ul>

  <h3>üí£üí£üí£ Credentials & SSH Hijacking</h3>
  <ul>
    <li><strong>SSH Hijacking</strong>: Once I find credentials via exposed config files or predictable patterns:
      <ul>
        <li>Reuse keys or passwords to access more privileged accounts</li>
        <li>Abuse agent forwarding or misconfigured <code>.ssh/authorized_keys</code></li>
      </ul>
    </li>
    <li><strong>Password reuse</strong>: I test found credentials across other users or services</li>
  </ul>

  <h3>‚ò£Ô∏è‚ò£Ô∏è‚ò£Ô∏è Known Plaintext Attacks: bkcrack</h3>
  <ul>
    <li>I encountered a ZIP archive encrypted with legacy PKZIP. Using <strong>bkcrack</strong> and a known plaintext (e.g. README or predictable header):
      <ul>
        <li>I recovered the encryption key and decrypted the archive</li>
        <li>This granted me credentials for a higher-privileged user</li>
      </ul>
    </li>
    <li>Lesson learned: never underestimate predictable content in protected files</li>
  </ul>

  <h3>‚ò¢Ô∏è‚ò¢Ô∏è‚ò¢Ô∏è‚ò¢Ô∏è Kernel Exploits (Last Resort)</h3>
  <ul>
    <li>If all else fails, and the kernel is vulnerable, I may:
      <ul>
        <li>Check <code>uname -r</code> and validate against <a href="https://www.linuxkernelcves.com/" target="_blank">known kernel exploits</a></li>
        <li>Download and compile exploits like Dirty Cow, Dirty Pipe, or OverlayFS</li>
        <li>This step is riskier and often breaks stability‚Äîlast resort only</li>
      </ul>
    </li>
  </ul>

  <hr>
</body>
<footer style="margin-top: 3rem; font-size: 0.9rem; color: #666;">
  For context and contact, please refer to the CV associated with this GitHub profile.
</footer>
</html>
